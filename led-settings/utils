#!/bin/bash -
#title           : utils
#description     : Defines behaviour of starting script
#author		     : Keisuke Suzuki
#usage		     : source utils
#notes           : Derived from a work
#                  @ralish https://github.com/ralish/bash-script-template
#===============================================================================

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline

# Initialize environment
script_init() {
    # Useful paths
    readonly orig_cwd="$PWD"
    readonly script_path="${BASH_SOURCE[0]}"
    readonly script_dir="$(dirname "$script_path")"
    readonly script_name="$(basename "$script_path")"
    readonly script_params="$*"

    # Important to always set as we use it in the exit handler
    readonly ta_none="$(tput sgr0 2> /dev/null || true)"
}

# Handler for unexpected errors
script_trap_err() {
    local exit_code=1

    # Disable the error trap handler to prevent potential recursion
    trap - ERR

    # Consider any further errors non-fatal to ensure we run to completion
    set +o errexit
    set +o pipefail

    # Validate any provided exit code
    if [[ ${1-} =~ ^[0-9]+$ ]]; then
        exit_code="$1"
    fi

    # Output debug data if in Cron mode
    if [[ -n ${cron-} ]]; then
        # Restore original file output descriptors
        if [[ -n ${script_output-} ]]; then
            exec 1>&3 2>&4
        fi

        # Print basic debugging information
        printf '%b\n' "$ta_none"
        printf '***** Abnormal termination of script *****\n'
        printf 'Script Path:            %s\n' "$script_path"
        printf 'Script Parameters:      %s\n' "$script_params"
        printf 'Script Exit Code:       %s\n' "$exit_code"

        # Print the script log if we have it. It's possible we may not if we
        # failed before we even called cron_init(). This can happen if bad
        # parameters were passed to the script so we bailed out very early.
        if [[ -n ${script_output-} ]]; then
            printf 'Script Output:\n\n%s' "$(cat "$script_output")"
        else
            printf 'Script Output:          None (failed before log init)\n'
        fi
    fi

    # Exit with failure status
    exit "$exit_code"
}

# Handler for exiting the script
script_trap_exit() {
    cd "$orig_cwd"

    # Remove Cron mode script log
    if [[ -n ${cron-} && -f ${script_output-} ]]; then
        rm "$script_output"
    fi

    # Remove script execution lock
    if [[ -d ${script_lock-} ]]; then
        rmdir "$script_lock"
    fi

    # Restore terminal colours
    printf '%b' "$ta_none"
}

script_exit() {
    if [[ $# -eq 1 ]]; then
        printf '%s\n' "$1"
        exit 0
    fi

    if [[ ${2-} =~ ^[0-9]+$ ]]; then
        printf '%b\n' "$1"
        # If we've been provided a non-zero exit code run the error trap
        if [[ $2 -ne 0 ]]; then
            script_trap_err "$2"
        else
            exit 0
        fi
    fi

    script_exit 'Missing required argument to script_exit()!' 2
}

# Pretty print the provided string
function pretty_print() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to pretty_print()!' 2
    fi

    if [[ -z ${no_colour-} ]]; then
        if [[ -n ${2-} ]]; then
            printf '%b' "$2"
        else
            printf '%b' "$fg_green"
        fi
    fi

    # Print message & reset text attributes
    if [[ -n ${3-} ]]; then
        printf '%s%b' "$1" "$ta_none"
    else
        printf '%s%b\n' "$1" "$ta_none"
    fi
}

# Print a centered text
## @params:
##    $1: Character to surround the text (`-`)
##    $2: Text to be centered (``)
##    $3: Width (40)
center() {
    if [ -n "$2" ]; then
        local padding
        padding="$(printf '%0.1s' "${1:--}"{1..500})"
        printf '%*.*s %s %*.*s\n' 0 \
            "$(((${3:-40} - 2 - ${#2}) / 2))" "$padding" "$2" 0 \
            "$(((${3:-40} - 1 - ${#2}) / 2))" "$padding"
    else
        printf '%0.1s' "${1:--}"{1..40}
        echo
    fi
}

# Print a centered text
## @params:
##    $1: String to be placed on lhs (`left`)
##    $2: String to be placed on rhs (`right`)
##    $3: Width (40)
##    $4: Width Limit (60)
space_between() {
    string1=${1:-left}
    string2=${2:-right}
    width=${3:-40}
    limit=${4:-60}
    local padding
    padding=$(printf '%*s' "$limit")
    padding=${padding// / }
    printf '%s' "$string1"
    printf '%*.*s' 0 $((width - ${#string1} - ${#string2})) "$padding"
    printf '%s\n' "$string2"
}
